 CREATE DATABASE IF NOT EXISTS GUAYERD_EDIT;
USE GUAYERD_EDIT;

CREATE TABLE tipo_donante (
    Id_tipo INT PRIMARY KEY AUTO_INCREMENT,
    Tipo_donante VARCHAR(13) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE estado_donante (
    Id_estado INT PRIMARY KEY AUTO_INCREMENT,
    Estado_donante VARCHAR(8) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE pais (
    Id_pais INT PRIMARY KEY AUTO_INCREMENT,
    Pais VARCHAR(9) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE razon_social (
    Id_razon_social INT PRIMARY KEY AUTO_INCREMENT,
    Razon_social VARCHAR(30) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE contribuyente (
    Id_contribuyente INT PRIMARY KEY AUTO_INCREMENT,
    Tipo_contribuyente VARCHAR(30) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE frecuencia (
    Id_frecuencia INT PRIMARY KEY AUTO_INCREMENT,
    Frecuencia VARCHAR(10) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE categ_proveedores (
    Id_categoria INT PRIMARY KEY AUTO_INCREMENT,
    Categoria VARCHAR(30) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE ciudad (
    Id_ciudad INT PRIMARY KEY AUTO_INCREMENT,
    Ciudad VARCHAR(40) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE cuenta (
    Id_cuenta INT PRIMARY KEY AUTO_INCREMENT,
    Nro_cuenta VARCHAR(7) NOT NULL,
    Tipo_cuenta VARCHAR(9) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE donantes (
 	`Id_donante` 		VARCHAR (15) NOT NULL PRIMARY KEY,
  	`Nombre` 	TEXT (50),
    `CUIT` VARCHAR (20),
    `Correo_electronico` VARCHAR (100),
    `Telefono` VARCHAR (20),
    `Alta` DATE,
    `Baja` DATE,
    `Id_tipo` INT,
    `Id_razon_social` INT,
    `Id_contribuyente` INT,
    `Id_estado` INT,
    `Id_frecuencia` INT,
    `Id_pais` INT,
    FOREIGN KEY (Id_tipo) REFERENCES tipo_donante(Id_tipo) ON DELETE CASCADE,
    FOREIGN KEY (Id_razon_social) REFERENCES razon_social(Id_razon_social) ON DELETE CASCADE,
    FOREIGN KEY (Id_contribuyente) REFERENCES contribuyente(Id_contribuyente) ON DELETE CASCADE,
    FOREIGN KEY (Id_estado) REFERENCES estado_donante(Id_estado) ON DELETE CASCADE,
    FOREIGN KEY (Id_frecuencia) REFERENCES frecuencia(Id_frecuencia) ON DELETE CASCADE,
    FOREIGN KEY (Id_pais) REFERENCES pais(Id_pais) ON DELETE CASCADE
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE proveedores (
    Id_proveedor VARCHAR (6) NOT NULL PRIMARY KEY,
    Nombre VARCHAR(50) NOT NULL,
    CUIT VARCHAR(20) NOT NULL,
    Contacto VARCHAR(50),
    Correo_electronico VARCHAR(100),
    Id_categoria INT,
    Id_contribuyente INT,
    Id_razon_social INT,
    Id_ciudad INT,
    Id_pais INT,
    FOREIGN KEY (Id_categoria) REFERENCES categ_proveedores(Id_categoria) ON DELETE CASCADE,
    FOREIGN KEY (Id_contribuyente) REFERENCES contribuyente(Id_contribuyente) ON DELETE CASCADE,
    FOREIGN KEY (Id_razon_social) REFERENCES razon_social(Id_razon_social) ON DELETE CASCADE,
    FOREIGN KEY (Id_ciudad) REFERENCES ciudad(Id_ciudad) ON DELETE CASCADE,
    FOREIGN KEY (Id_pais) REFERENCES pais(Id_pais) ON DELETE CASCADE
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE ingresos (
    Id_ingreso INT PRIMARY KEY AUTO_INCREMENT,
    Id_donante VARCHAR(15),
    Tipo_movimiento VARCHAR(7),
    Fecha DATE NOT NULL,
    Importe DECIMAL(10, 2) NOT NULL,
    Id_cuenta INT,
    FOREIGN KEY (Id_donante) REFERENCES donantes(Id_donante) ON DELETE CASCADE,
    FOREIGN KEY (Id_cuenta) REFERENCES cuenta(Id_cuenta) ON DELETE CASCADE
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


CREATE TABLE egresos (
    Id_egreso INT PRIMARY KEY AUTO_INCREMENT,
    Id_proveedor VARCHAR(15),
    Tipo_movimiento VARCHAR(7),
    Fecha DATE NOT NULL,
    Importe DECIMAL(10, 2) NOT NULL,
    Id_cuenta INT,
    FOREIGN KEY (Id_proveedor) REFERENCES proveedores(Id_proveedor) ON DELETE CASCADE,
    FOREIGN KEY (Id_cuenta) REFERENCES cuenta(Id_cuenta) ON DELETE CASCADE
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


USE GUAYERD_EDIT


Select simple
SELECT * FROM donantes;

--Función SUM
SELECT SUM(Importe) AS Total_Ingresos FROM ingresos;

--Función AVG
SELECT AVG(Importe) AS Promedio_Egresos FROM egresos;

--Filtro WHERE
SELECT * FROM donantes WHERE Id_tipo = 1;

--JOIN (Inner Join)
SELECT d.Nombre, p.Pais 
FROM donantes d 
INNER JOIN pais p ON d.Id_pais = p.Id_pais;

--JOIN (Left Join)
SELECT d.Nombre, p.Pais 
FROM donantes d 
LEFT JOIN pais p ON d.Id_pais = p.Id_pais;

--ORDER BY
SELECT * FROM ingresos ORDER BY Fecha DESC;

--HAVING
SELECT Id_donante, SUM(Importe) AS Total_Ingresos 
FROM ingresos 
GROUP BY Id_donante 
HAVING SUM(Importe) > 1000;

SELECT Id_proveedor, AVG(Importe) AS Promedio_Egresos
FROM egresos
GROUP BY Id_proveedor
HAVING AVG(Importe) > 500;

--GROUP BY
SELECT Id_donante, SUM(Importe) AS Total_Ingresos 
FROM ingresos 
GROUP BY Id_donante;


--EXISTS
SELECT * FROM donantes 
WHERE EXISTS (SELECT 1 FROM ingresos WHERE ingresos.Id_donante = donantes.Id_donante);

--BETWEEN
SELECT * FROM ingresos 
WHERE Fecha BETWEEN '2022-01-01' AND '2022-12-31';

--LIKE
SELECT * FROM donantes 
WHERE Nombre LIKE '%Juan%';

--LIMIT
SELECT * FROM ingresos 
ORDER BY Fecha DESC 
LIMIT 10;

--DISTINCT
SELECT DISTINCT Id_donante FROM ingresos;

--ALIAS
SELECT Importe monto_donaciones
FROM ingresos
WHERE Importe > 75000

--LOS PROVEEDORES CON MAS TRANSACCIONES
SELECT e.Id_proveedor,
p.nombre AS NOMBRE_CLIENTE_FRECUENTE,
Count(e.Id_proveedor) AS MAX_CANT_TRANSACCIONES
FROM egresos e
INNER JOIN proveedores p
ON e.Id_proveedor = p. Id_proveedor
GROUP BY e.Id_proveedor,p.Nombre
HAVING COUNT(e.Id_egreso) > 5;


--EL MAXIMO PROVEEDOR
SELECT 
  e.Id_proveedor,
  COUNT(e.Id_egreso) AS MAX_TRANSACCIONES,
  p.Nombre AS PROVEEDOR_MAX
FROM 
  egresos e
  INNER JOIN proveedores p
  ON e.Id_proveedor = p.Id_proveedor
GROUP BY 
  e.Id_proveedor, p.Nombre
ORDER BY 
  COUNT(e.Id_egreso) DESC
LIMIT 1;
